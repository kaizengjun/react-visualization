{"version":3,"sources":["component/Column.js","component/Bubble.js","App.js","serviceWorker.js","index.js"],"names":["Column","item","this","props","style","height","val","backgroundColor","color","react_default","a","createElement","className","Component","Bubble","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","arr","map","sortStateArr","i","length","j","copy","_","cloneDeep","copy2","push","temp","count","handleDelay","_this2","setTimeout","setState","component_Column","key","onClick","startSort","bind","reset","App","component_Bubble","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c343f1e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Column extends Component {\n  render () {\n    const item = this.props.item\n    const style = {\n      height: item.val * 7 +'px',\n      backgroundColor: item.color\n    }\n    return (\n      <div className='colum' style={style}>\n        <span className=\"value\">{item.val}</span>\n      </div>\n    )\n  }\n}\n\nexport default Column","import React, { Component } from 'react'\nimport Column from './Column'\nimport _ from 'lodash'\n\nconst TIMEOUT = 100\n\nclass Bubble extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: props.arr.map(item => {\n        return {\n          val: item,\n          color: 'cadetblue'\n        }\n      }),\n      sortStateArr: []\n    }\n  }\n\n  startSort () {\n    const arr = this.state.data\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        const copy = _.cloneDeep(arr)\n        const copy2 = _.cloneDeep(arr)\n        copy[j].color = 'yellow'\n        copy[j + 1].color = 'yellow'\n        this.state.sortStateArr.push(_.cloneDeep(copy))\n        if (arr[j].val > arr[j + 1].val) {\n          copy2[j].color = 'red'\n          const temp = arr[j]\n          arr[j] = arr[j + 1]\n          arr[j + 1] = temp\n        } else {\n          copy2[j + 1].color = 'red'\n        }\n        this.state.sortStateArr.push(_.cloneDeep(copy2))\n        this.state.sortStateArr.push(_.cloneDeep(arr))\n      }\n    }\n    let count = 0\n    while (count < this.state.sortStateArr.length) {\n      this.handleDelay(count)\n      count++\n    }\n  }\n\n  handleDelay (count) {\n    setTimeout(() => {\n      this.setState({\n        data: this.state.sortStateArr[count]\n      })\n    }, TIMEOUT * count)\n  }\n\n  reset () {\n    this.setState({\n      data: this.props.arr.map(item => {\n        return {\n          val: item,\n          color: 'cadetblue'\n        }\n      }),\n      sortStateArr: []\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <p>Bubble</p>\n        <div className='wrapper'>\n          {this.state.data.map(item =>\n            <Column key={item.val} item={item} />\n          )}\n        </div>\n        <button onClick={this.startSort.bind(this)}>Start</button>\n        <button onClick={this.reset.bind(this)}>Reset</button>\n      </div>\n    )\n  }\n}\n\nexport default Bubble","import React, { Component } from 'react';\nimport './App.css';\nimport Bubble from './component/Bubble'\n\nclass App extends Component {\n  render() {\n    const sortArr = [20, 3, 9, 44, 12, 8, 1, 23, 4]\n    return (\n      <div className=\"App\">\n        <Bubble arr={sortArr}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}